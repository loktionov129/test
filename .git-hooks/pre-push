#!/bin/bash
shopt -s globstar
# --------------------------------------------------------
# CONTROL WHAT TO CHECK
# ========================================================

CHECK_MIGRATIONS=true
RUN_TESTS=true
CHECK_PEP8=true
CHECK_JS=false
CHECK_SASS=false
CHECK_SWAGGER=false

# in the case html/js developer only works on frontend stuff
# let's not force them into making unnecessary checks on commits
# if you want to do ONLY frontend code (js/scss) checks then you need
# to set FRONTEND_ONLY variable, like
# `$> export FRONTEND_ONLY=true`
command -v fab >> /dev/null
pythondev=$?
if [[ "$pythondev" != 0 ]] ||
   [[ ! -z ${FRONTEND_ONLY} ]] ; then
  CHECK_MIGRATIONS=false
  RUN_TESTS=false
  CHECK_PEP8=false
  CHECK_JS=false
  CHECK_SASS=false
  CHECK_SWAGGER=false
fi


# --------------------------------------------------------
# DEFINE VARS
# ========================================================

NORMAL=$(tput sgr0)
GREEN=$(tput setaf 2; tput bold)
YELLOW='\033[1;33m'
RED=$(tput setaf 1; tput bold)
NC='\033[0m' # No Color

# --------------------------------------------------------
# DEFINE COMMON FUNCTIONS
# ========================================================

function red() {
  echo -e "$RED$*$NORMAL"
}

function green() {
  echo -e "$GREEN$*$NORMAL"
}

function yellow() {
  echo -e "$YELLOW$*$NORMAL"
}

function message() {
  printf "%0.s$1-" {1..80}.; printf "\n"
  echo $2
  printf "%0.s=" {1..80}; printf "\n"
  printf "${NC}"
}

command_exists () {
  type "$1" &> /dev/null ;
}

command_not_exists () {
  ! type "$1" &> /dev/null ;
}

# --------------------------------------------------------
# DEFINE CHECK FUNCTIONS
# ========================================================

function check_js {

  message $YELLOW "Running Frontend JS Code Linters..."

  # check javascript code in js files
  npm run lint-js
  eslint_js=$?

  if [[ "$eslint_js" != 0 ]]; then
    jserrors=true
    red "\nYou got eslint problems in ui/js code"
    red "Pls run 'npm run lint-js' to see errors\n"
    exit 1
  fi

  if [[ "$jserrors" = false ]]; then
    green 'No JS errors found! \n'
  fi
}


function check_sass {

  message $YELLOW "Running Frontend SASS Code Linters..."

  # run sasslint
  # against SASS code we created
  npm run lint-sass
  sasslint=$?
  if [[ "$sasslint" != 0 ]]; then
    sasserrors=true
    red "You got SASS problems"
    red "Pls run 'npm run lint-sass' to see errors \n"
    exit 1
  fi

  if [[ "$sasserrors" = false ]]; then
    green 'No SASS errors found! \n'
  fi
}


function check_pep8 {

  message $YELLOW "Running Python PEP8..."

  # run python linters
  flake8 --config=.flake8 apps libs
  pep8errors=$?

  if [[ "$pep8errors" != 0 ]]; then
    red "You got PEP8 problems"
    red "Pls run 'fab linters.pep8' to see them all\n"
  fi

  if [[ "$pep8errors" = 0 ]]; then
    green 'No PEP8 errors found! \n'
  fi
}


function check_swagger {

  message $YELLOW "Running Swagger file validation..."

  swaggerlint_mobile=$(docker-compose run swagger-mobile grunt swagger | grep 'Aborted')
  swaggerlint_web=$(docker-compose run swagger-web grunt swagger | grep 'Aborted')

  if [[ -n "$swaggerlint_mobile" ]]; then
    swaggererrors=true
    echo "You got mobile Swagger problems "$swaggerlint_mobile
    echo "Pls run [docker-compose run swagger-mobile grunt swagger] to see errors"
    printf "\n"
  fi

  if [[ -n "$swaggerlint_web" ]]; then
    swaggererrors=true
    echo "You got web Swagger problems "$swaggerlint_web
    echo "Pls run [docker-compose run swagger-web grunt swagger] to see errors \n"
  fi
}


function check_migrations {
  # check correct migrations

  message $YELLOW "Check migrations..."

  fab django.makemigrations | grep 'No changes detected'
  newmigrations=$?

  if [[ "$newmigrations" != 0 ]]; then
    yellow New migrations were added! Please commit them!"\n"
    exit 1
  else
    green No issues with Django migrations found!"\n"
  fi

}


function run_tests {
    # run django tests
    message $YELLOW "Running Tests..."

    fab tests.run
    djangotests=$?

    if [[ "$djangotests" = 0 ]]; then
      green All django tests are successfully passed!"\n"
    else
      red Your django tests got failed"\n"
    fi
}

# --------------------------------------------------------
# CODE BEGINS HERE
# ========================================================

# default state assumption for possible errors
jserrors=false
sasserrors=false
swaggererrors=false
pep8errors=0
newmigrations=0
djangotests=0

# check for errors just in develop or master branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)
PUSH_COMMAND=$(ps -ocommand= -p $PPID)
IS_DELETE='\-\-delete|\-d'
IS_DESTRUCTIVE='\-\-force|\-\-delete|\-f|\-d'
PROTECTED_BRANCH='master'
WILL_DELETE_PROTECTED_BRANCH=" :$PROTECTED_BRANCH"

# Only run tests if you're pushing into master or develop
# branches (i.e. quiet on other branches as you develop and commit
# often)
if [[ "$BRANCH" != "master" && "$BRANCH" != "develop" ]]; then
    RUN_TESTS=false
fi

# make sure we don't run tests when we execute delete operation
# against remote origin
if [[ $PUSH_COMMAND =~ $IS_DELETE ]]; then
  echo -e "\nI won't run tests for this operation nor perform any linters activity!\n"
  exit 0
fi

# make sure we don't force or delete master branch
if [[ $PUSH_COMMAND =~ $IS_DESTRUCTIVE ]] &&
       ( [[ $CURRENT_BRANCH = $PROTECTED_BRANCH ]] ||
             [[ $PUSH_COMMAND =~ $PROTECTED_BRANCH ]] ) ||
   [[ $PUSH_COMMAND =~ $WILL_DELETE_PROTECTED_BRANCH ]]; then
  echo -e "\n[PRE-PUSH HOOK ERROR] Do not force-push or delete the \"$PROTECTED_BRANCH\" branch!\n"
  # you can skip this check with --no-verify
  exit 1
fi

# --------------------------------------------------------
# PERFORM CHECKS
# ========================================================

[[ "$CHECK_JS" = true ]] && check_js
[[ "$CHECK_SASS" = true ]] && check_sass
[[ "$CHECK_PEP8" = true ]] && check_pep8
[[ "$RUN_TESTS" = true ]] && run_tests
[[ "$CHECK_MIGRATIONS" = true ]] && check_migrations
[[ "$CHECK_SWAGGER" = true ]] && check_swagger

if [[ "$swaggererrors" = true ]] ||
       [[ "$jserrors" = true ]]  ||
       [[ "$sasserrors" = true ]]  ||
       [[ "$djangotests" != 0 ]] ||
       [[ "$pep8errors" != 0 ]]; then

    message $RED "Push aborted due to errors - pls fix them first!"
    exit 1
else
  if command_exists cowsay ; then
    cowsay "Wonderful JOB! Thank You!"
  else
    message $GREEN "Wonderful JOB! Thank You!"
  fi
fi
